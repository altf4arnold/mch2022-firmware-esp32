name: Release build -> OTA
run-name: "${{ github.event.release.prerelease && 'Prerelease' || 'Release' }} build: ${{ github.event.release.name }}"

on:
  release:
    types: [released, prereleased]

env:
  RELEASE_TYPE: ${{ github.event.release.prerelease && 'Prerelease' || 'Release' }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repo + submodules
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Build with ESP-IDF
      uses: espressif/esp-idf-ci-action@v1
      with:
        esp_idf_version: v4.4.4
        target: esp32

    - name: Upload release asset launcher.bin
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./build/launcher.bin
        asset_name: launcher.bin
        asset_content_type: application/octet-stream

    - name: Upload release asset launcher.elf
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./build/launcher.elf
        asset_name: launcher.elf
        asset_content_type: application/x-executable

    - name: OTA <- Checkout repo
      uses: actions/checkout@v3
      with:
        repository: badgeteam/ota
        path: ../ota

    - name: OTA <- Add new firmware build
      env:
        build_type: ${{ github.event.release.prerelease && 'dev' || '' }}
      run: |
        cp -f build/launcher.bin ../ota/mch2022.bin
        cp -n build/launcher.elf ../ota/mch2022-${{ github.event.release.tag_name }}.elf
        cd ../ota
        jq -r --arg build_type "$build_type" --arg date $(date -I) 'map(
          select(.id == "mch2022")
          | if $build_type == "" then .version else .["version_" + $build_type] end = {
            name: "${{ github.event.release.tag_name }}",
            url: "${{ github.event.release.html_url }}",
            date: $date
          }
        )' badges.json | sponge badges.json

    - id: create-pr
      name: OTA <- Create PR for release
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.OTA_PUSH_TOKEN }}
        path: ../ota
        branch:         autorelease/mch2022${{ github.event.release.prerelease && '-dev' || '' }}
        title:          "${{ env.RELEASE_TYPE }} MCH2022 ${{ github.event.release.name }}"
        commit-message: "${{ env.RELEASE_TYPE }} MCH2022 ${{ github.event.release.name }}"
        assignees:      ${{ github.event.sender.login }}
        reviewers:      Pwuts

    - name: Generate release build report
      env:
        repo: ${{ github.repository }}
        tag:  ${{ github.event.release.tag_name }}
        compare_url_template: ${{ format('/{0}/compare/{{base}}...{{head}}', github.repository) }}
      run: |
        previous_tag=$(git tag --sort '-refname' | grep -A1 "$tag" | tail -1)
        tag_compare_url=$(sed "s!{base}!$previous_tag!; s!{head}!$tag!" <<< $compare_url_template)

        build_size_main=$(du build/launcher.bin | awk '{ print $1 }')

        EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)

        cat << $EOF >> $GITHUB_STEP_SUMMARY
        # $RELEASE_TYPE build summary üöÄ${{ github.event.release.prerelease && 'üöß' || '' }}üî®

        **Release:** [${{ github.event.release.name }}](${{ github.event.release.html_url }})

        **Source:** [${repo}@\`${tag}\`](/${repo}/tree/${tag})

        **OTA release PR:** ${{ steps.create-pr.outputs.pull-request-url }}

        ## Build details
        **Size of \`launcher.bin\`:** $build_size_main kB

        \`\`\`console
        \$ du -h build/*.bin build/*.elf build/*/*.bin build/*/*.elf
        $(du -h build/*.bin build/*.elf build/*/*.bin build/*/*.elf)
        \`\`\`

        ### Source
        **Diff with previous tag:** $tag_compare_url

        #### Submodules
        \`\`\`
        $(
          git submodule --quiet foreach '
            branch=$(grep -C1 "$(git config --get remote.origin.url)" $toplevel/.gitmodules | grep "branch =" | rev | cut -d" " -f1 | rev)
            git fetch origin $branch --unshallow >&2
            commits_behind=$(git --no-pager log --oneline HEAD..origin/$branch)
            [ -n "$commits_behind" ] && echo "$name has new commits upstream:\n$commits_behind" >&2
            echo \
              "$path\t" \
              "$branch\t" \
              "$(git rev-parse --short HEAD)\t" \
              $(if [ -z "$commits_behind" ];
                then echo "‚úÖ up to date";
                else echo "‚ö†Ô∏è $(echo "$commits_behind" | wc -l) commits behind origin/$branch";
              fi)
          ' | column -t -s $'\t'
        )
        \`\`\`

        $EOF
      continue-on-error: true
